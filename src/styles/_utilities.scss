@import 'variables';
@import 'mixins';

@each $key, $value in $spacing {

	.pt-#{$key} {
		padding-top: $value;
	}

	.pb-#{$key} {
		padding-bottom: $value;
	}

	.pl-#{$key} {
		padding-left: $value;
	}

	.pr-#{$key} {
		padding-right: $value;
	}

	.p-#{$key} {
		padding: $value;
	}

	.mt-#{$key} {
		margin-top: $value;
	}

	.mb-#{$key} {
		margin-bottom: $value;
	}

	.ml-#{$key} {
		margin-left: $value;
	}

	.mr-#{$key} {
		margin-right: $value;
	}

	.m-#{$key} {
		margin: $value;
	}

	.h-#{$key} {
		height: $value;
	}

	.w-#{$key} {
		width: $value;
	}
}

@each $size, $value in $font-sizes {
	.fs-#{$size} {
		font-size: $value;
	}
}

@each $weight, $value in $font-weights {
	.fw-#{$weight} {
		font-weight: $value;
	}
}

$height-sizes: (
	"100": 100vh,
	"50": 50vh,
	"25": 25vh
);

@each $key, $value in $height-sizes {
	.min-h-#{$key} {
		min-height: $value;
	}

	.h-#{$key} {
		height: $value;
	}
}

$width-sizes: (
	"100": 100vh,
	"50": 50vh,
	"25": 25vh
);

@each $key, $value in $width-sizes {
	.min-w-#{$key} {
		min-width: $value;
	}

	.w-#{$key} {
		width: $value;
	}
}
@each $color, $tones in $colors {
	@if type-of($tones)==map {

		// Her bir ton için sınıflar oluştur
		@each $tone, $hex in $tones {
			.text-#{$color}-#{$tone} {
				@include color($color, $tone);
			}

			.bg-#{$color}-#{$tone} {
				@include background-color($color, $tone);
			}
		}

		// Varsayılan ton için sınıflar oluştur (örneğin, ton 6)
		.text-#{$color} {
			@include color($color, 6);
		}

		.bg-#{$color} {
			@include background-color($color, 6);
		}
	}

	@else {
		.text-#{$color} {
			@include color($color);
		}

		.bg-#{$color} {
			@include background-color($color);
		}
	}
}

.ta-left {
	text-align: left;
}

.ta-center {
	text-align: center;
}

.ta-right {
	text-align: right;
}

.d-flex {
	display: flex;
}

.flex-column {
	flex-direction: column;
}

.flex-row {
	flex-direction: row;
}

.align-center {
	align-items: center;
}

.align-end {
	align-items: end;
}

.align-start {
	align-items: start;
}
.justify-center {
	justify-content: center;
}

.justify-end {
	justify-content: flex-end;
}

.justify-between {
	justify-content: space-between;
}

.justify-around {
	justify-content: space-around;
}

.overflow-y-auto {
	overflow-y: auto;
}

.overflow-x-auto {
	overflow-x: auto;
}

.ml-auto {
	margin-left: auto;
}

.mr-auto {
	margin-right: auto;
}

@each $name, $value in $borders {
	.border-#{$name} {
		border: $value;
	}
}


.flex-column {
	display: flex;
	flex-direction: column;
}

.flex-grow {
	flex-grow: 1;
}

@each $key, $value in $spacing {
	.gap-#{$key} {
		gap: $value;
	}
}

$border-radius: (
	"none": 0,
	"sm": 2px,
	"md": 4px,
	"lg": 8px,
	"full": 9999px,
);

@each $key, $value in $border-radius {
	.rounded-#{$key} {
		border-radius: $value;
	}
}

$box-shadows: (
	"sm": 0 1px 2px rgba(0, 0, 0, 0.05),
	"md": 0 4px 6px rgba(0, 0, 0, 0.1),
	"lg": 0 10px 15px rgba(0, 0, 0, 0.1),
	"xl": 0 20px 25px rgba(0, 0, 0, 0.1),
);

@each $key, $value in $box-shadows {
	.shadow-#{$key} {
		box-shadow: $value;
	}
}